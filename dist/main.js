/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("\nlet myProjects = JSON.parse(localStorage.getItem('projects')) || [];\n\nclass Todos {\n    constructor(title, description, dueDate, priority) {\n        this.title = title;\n        this.description = description;\n        this.dueDate = dueDate;\n        this.priority = priority;\n    }\n}\n\nclass Project {\n    constructor(name){\n        this.name = name;\n        this.tasks = [];\n    }\n\n}\n\nfunction innitTaskButtons (ind) {\n    const taskDeleteButtons = document.querySelectorAll('.delete-icon');\n    taskDeleteButtons.forEach((taskButton)=>taskButton.addEventListener('click', deleteTask));\n    const addNewTaskButton = document.querySelector('.add-task-button');\n    addNewTaskButton.addEventListener('click', () => showTodoForm(ind));\n}\n\nfunction showTodoForm(ind) {\n    const formTodo = document.querySelector('.form-todo');\n\n    formTodo.innerHTML = `\n    <form action=\"todo-form\">\n    <ul>\n        <li>\n            <label class=\"Todo-title\" for=\"name\">Title:</label>\n            <input class=\"Todo-input\" type=\"text\" id=\"todo_title\">\n        </li>\n        <li>\n            <label class=\"Todo-description\" for=\"name\">Description:</label>\n            <input class=\"Todo-input\" type=\"text\" id=\"todo_description\">\n        </li>\n        <li>\n            <label class=\"Todo-duedate\" for=\"name\">Duedate:</label>\n            <input class=\"Todo-input\" type=\"text\" id=\"todo_duedate\">\n        </li>\n        <div class=\"form-buttons\">\n            <li>\n                <button type=\"button\" id=\"submit-todo\" data-index-submit-task=\"${ind}\">Add</button>\n            </li>\n            <li>\n                <button type=\"button\" id=\"close-todo\">Close</button>\n            </li>\n        </div>\n    </ul>`\n\n    innitFormButtons(ind);\n\n    formTodo.classList.toggle(\"display\");\n}\n\nfunction innitFormButtons (ind){\n    const closeTodoButton = document.getElementById('close-todo');\n    const submitTodoButton = document.getElementById('submit-todo');\n\n    closeTodoButton.addEventListener('click', () => showTodoForm(ind));\n    submitTodoButton.addEventListener('click', () => showTodoForm(ind));\n    submitTodoButton.addEventListener('click', addTask);\n    submitTodoButton.addEventListener('click', displayTasks(ind));\n}\n\nconst addProjectButton = document.querySelector('.add-project-button');\nconst closeProjectButton = document.getElementById('close-project');\nconst submitProjectButton = document.getElementById('submit-project');\nconst projectList = document.querySelector('.project-list');\nconst deleteProjectButton = document.querySelectorAll('.delete-project');\nconst taskDeleteButtons = document.querySelectorAll('.delete-icon');\n\n\n//EVENT LISTENERS\naddProjectButton.addEventListener('click', showForm);\ncloseProjectButton.addEventListener('click', showForm);\nsubmitProjectButton.addEventListener('click', addProject);\nsubmitProjectButton.addEventListener('click', showForm);\nsubmitProjectButton.addEventListener('click', () => displayProjects(myProjects.length - 1));\n\nfunction deleteTask() {\n    console.log(this);\n    let i = Number(this.getAttribute('data-index-delete-task'));\n    let ind = Number(this.getAttribute('data-index-delete-task-project'));\n    myProjects[ind].tasks.splice(i, 1);\n    console.log(myProjects);\n    displayTasks(ind);\n    innitTaskButtons (ind)\n}\n\nfunction addProject (){\n\n    const input1 = document.getElementById('project_name').value;\n    myProjects.push( new Project(input1));\n    localStorage.setItem('projects', JSON.stringify(myProjects));\n    console.log(myProjects);\n}\n\nfunction displayProjects(i){\n    const newDiv = document.createElement(\"div\");\n    const newProjectName = document.createElement(\"li\"); \n    const newDeleteButton = document.createElement(\"li\");\n\n    newDiv.classList.add(\"flex-project\");\n    newProjectName.textContent = myProjects[i].name; \n    newProjectName.setAttribute('data-index-project-name', i);\n    newDeleteButton.addEventListener('click', deleteProject);\n    newDeleteButton.setAttribute('data-index-project', i);\n    newDeleteButton.textContent = \"x\";\n    newDeleteButton.classList.add('delete-project');\n\n    newProjectName.addEventListener('click', displayProjectPreview);\n    \n    newDiv.appendChild(newProjectName);\n    newDiv.appendChild(newDeleteButton);\n    projectList.appendChild(newDiv);\n}\n\nfunction displayProjectPreview(){\n    const ind = Number(this.getAttribute('data-index-project-name'));\n    const projectTitle = document.querySelector('.project-title');\n    projectTitle.innerHTML = myProjects[ind].name;\n\n    displayTasks(ind);\n    createAddTasksButton(ind);\n    innitTaskButtons(ind);\n  \n}\n\nfunction createAddTasksButton(ind){\n    const buttonDiv = document.querySelector('.button-task')\n    buttonDiv.innerHTML = `<button class=\"add-task-button\" data-index-add-task-button=\"${ind}\">+ Add New Task</button>`\n}\n\nfunction deleteProject (){\n    const ind = Number(this.getAttribute('data-index-project'));\n    console.log(ind);\n    \n    const parent = this.parentElement;\n    parent.parentElement.removeChild(parent);\n    if (ind > -1) {\n        myProjects.splice(ind, 1);\n\t}\n    localStorage.setItem('projects', JSON.stringify(myProjects));\n    console.log(myProjects);\n}\n\n\nfunction displayProjectsInStorage(myProjects) {\n    for (let i = 0; i < myProjects.length; i++) {\n        displayProjects(i);\n        console.log(myProjects.length);\n    }\n}\n\n\nfunction addTask(){\n\n    const input1 = document.getElementById('todo_title').value;\n    const input2 = document.getElementById('todo_description').value;\n    const input3 = document.getElementById('todo_duedate').value;\n\n    console.log('input1 value:' + input1);\n    const ind = Number(this.getAttribute('data-index-submit-task'));\n    console.log('index for project:' + ind);\n    myProjects[ind].tasks.push(new Todos(input1, input2, input3));\n    console.log(myProjects);\n}\n\nfunction displayTasks(ind) {\n\n    console.log('index variable:' + ind);\n    const tasksList = document.querySelector('.tasks');\n    tasksList.innerHTML = myProjects[ind].tasks.map((task, i) => {\n\n    return `\n    <li> \n     <div class=\"task-due-date\">       \n         <input type=\"checkbox\" id=\"task1\">\n         <label for=\"task1\"> ${task.title} </label>\n         <i class=\"due-date\">${task.dueDate}</i> \n         <img class=\"edit-icon\" src=\"images/edit.svg\" alt=\"\">\n         <img data-index-delete-task-project=\"${ind}\" data-index-delete-task=\"${i}\" class=\"delete-icon\" src=\"images/delete.svg\" alt=\"\">\n     </div>\n     </li>`\n    }).join('');\n\n    innitTaskButtons(ind);\n}\n\n\nfunction showForm(){\n    const form = document.querySelector('.form');\n    form.classList.toggle(\"display\");\n}\n\nfunction createDefaultProject (){\n    if(myProjects.length === 0){\n        myProjects.push( new Project('Default Project'));\n    };\n}\n\nfunction createDefaultTasks (){\n    if(myProjects[0].tasks.length === 0){\n        myProjects[0].tasks.push( new Todos('Preparar Bolso', 'Preparar Bolso para irse de viaje', '15/09/2021'));\n    }\n}\n\ncreateAddTasksButton(0);\ndisplayTasks(0);\ncreateDefaultProject ();\ncreateDefaultTasks();\ndisplayProjectsInStorage(myProjects);\n\n\n//# sourceURL=webpack://todolist/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;